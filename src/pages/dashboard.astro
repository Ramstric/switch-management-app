---
Astro.response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
Astro.response.headers.set('Pragma', 'no-cache');
Astro.response.headers.set('Expires', '0');

import "../styles/global.css";

import MainLayout from "../layouts/mainLayout.astro";
import Button from "../components/Button.astro";

import {DATABASE_NAME, TABLE_NAME} from 'astro:env/client';
---

<MainLayout>
  <h2>Registro de datos</h2>
  <div class="database-view">
    <table id="data-table">
      <thead>
        <tr>
          <th>Tipo</th>
          <th>Dispositivo</th>
          <th>Direcci√≥n MAC</th>
          <th>Switch</th>
          <th>Puerto</th>
          <th>Hora</th>
          <th>Fecha</th>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
  </div>

  <div class="popup" id="popup">
    <div class="popup-content">
      <h3>Bloquee o registre el dispositivo</h3>
      <div class="name_device">
        <label for="name">Dispositivo</label>
        <input type="text" name="name" />
      </div>
      <div class="buttons">
        <Button
        ID="block-button"
        innerHtml="Bloquear"
        bgcolor="var(--red)"
        labelcolor="var(--primary)"
        type="invert"
      />
        <Button
        ID="register-button"
        innerHtml="Registrar"
        bgcolor="var(--blue)"
        labelcolor="var(--primary)"
        type="invert"
        disable
      />
      </div>
    </div>
  </div>
</MainLayout>

<style is:global>
  h2, h3 {
    height: fit-content;
    color: var(--primary);
  }

  .database-view {
    height: 80%;
    background-color: var(--primary);
    padding: 10px 45px;
    border-radius: 10px;
    justify-content: flex-start;
  }

  table {
    border-collapse: collapse;
    height: fit-content;
    table-layout: fixed;
  }
  thead > tr :nth-child(1) {width: 15%;}
  thead > tr :nth-child(2) {width: 25%;}
  thead > tr :nth-child(3) {width: 20%;}
  thead > tr :nth-child(4) {width: 8%;}
  thead > tr :nth-child(5) {width: 8%;}
  thead > tr :nth-child(6) {width: 10%;}
  thead > tr :nth-child(7) {width: 14%;}

  th {
    font-weight: 600;
    padding-bottom: 12px;
  }

  td {
    font-weight: 300;
    text-align: center;
  }

  .desconocido{
    background-color: var(--red);
    color: var(--primary);

    transition: all 0.25s ease;

    td {font-weight: 800;};
  }

  .desconocido:hover {
    background-color: var(--secondary);
    color: var(--primary);

    cursor: pointer;
  }

  .bloqueado {color: var(--red);}

  .popup {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
  }

  .popup-content {    
    background-color: var(--background);
    gap: 25px;
    padding: 25px;
    border-radius: 10px;
    width: fit-content;
    height: fit-content;
  }

  .name_device {
    flex-direction: row;
    justify-content: center;
    gap: 10px;
  }
  .name_device label {
    width: fit-content;

    color: var(--primary);
    font-size: var(--p-desktop);
    font-weight: 350;
  }
  .name_device input {
    width: 125px;
    padding: 0 5px;

    background-color: var(--secondary);

    border: none;
    border-radius: 5px;

    color: var(--primary);
    font-size: var(--p-desktop);
    font-weight: 350;
  }
  .name_device input:focus {
    background-color: var(--primary);

    outline: none;

    color: var(--background);
  }

  .buttons {
    flex-direction: row;
    gap: 25px;
  }

</style>

<script>

  // Fetch telnet connection at /api/telnetConnection
  async function fetchTelnetDevices() {
    try {
      const response = await fetch('/api/retrieveTelnetDevices', {
        method: 'POST',
        mode: 'no-cors',
        headers: {'Content-Type': 'application/json'}
      });

      const data = await response.json();

    } catch (error) {
      console.error('Error fetching telnet connection:', error);
    }
  }

  // Fetch database data from the server at /api/retrieveData by passing username and password
  async function fetchDatabase() {
    try {
      const response = await fetch('/api/retrieveDatabase', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'}
      });
      
      const data = await response.json();
      
      populateTable(data);

    } catch (error) {
      console.error('Error fetching data:', error);
    }
  }

  // Register or block a device
  async function updateDevice(nameInput: HTMLInputElement, macAddress: string, type: string) {
    try {
      const response = await fetch('/api/updateDevice', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          mac: macAddress,
          name: nameInput.value.trim(),
          type: type
        })
      });

      const data = await response.json()

      document.getElementById('popup')!.style.display = 'none';
      fetchDatabase(); // Refresh the data after updating
      
    } catch (error) {
      console.error('Error registering device:', error);
      throw error; // Rethrow the error to be handled in the calling function
    }
  }

  async function unkownDevicePopup(macAddress: string) {
    const oldPopup = document.getElementById('popup') as HTMLDivElement;
    
    const oldPopupInput = oldPopup.querySelector('input') as HTMLInputElement;
    oldPopupInput.value = '';

    const popupParent = oldPopup.parentElement as HTMLDivElement;

    const popup = oldPopup.cloneNode(true) as HTMLDivElement; // Create copy of the popup element to avoid reusing the same element
    popupParent.appendChild(popup);                           // Append the clone to the parent
    oldPopup.remove();                                        // Remove the original popup

    popup.style.display = 'flex';

    popup.addEventListener('click', (event) => {
      if (event.target === popup) {popup.style.display = 'none';}
    });

    const blockButton = document.getElementById('block-button') as HTMLButtonElement;
    const registerButton = document.getElementById('register-button') as HTMLButtonElement;
    const nameInput = document.querySelector('.name_device input') as HTMLInputElement;

    nameInput.addEventListener('input', () => {
      if (nameInput.value.trim() !== '') {
        registerButton.removeAttribute('disabled');
      } else {
        registerButton.setAttribute('disabled', 'true');
      }
    });

    blockButton.addEventListener('click', updateDevice.bind(blockButton, nameInput, macAddress, 'bloqueado'));
    registerButton.addEventListener('click', updateDevice.bind(registerButton, nameInput, macAddress, 'autorizado'));
  }

  // Populate the table with data
  function populateTable(data: any) {
    const tableBody = document.querySelector('#data-table tbody') as HTMLTableSectionElement;
    tableBody.innerHTML = '';

    data.forEach((entrada: { tipo: string; mac: string; dispositivo: string; switch: number; puerto: number; hora: any; fecha: string | any[]; }) => {
      const row = document.createElement('tr');
      
      if (entrada.tipo === 'desconocido') {
        row.className = 'desconocido';
        row.addEventListener('click', () => {unkownDevicePopup(entrada.mac);});
      } else if (entrada.tipo === 'bloqueado') {
        row.className = 'bloqueado';
      }

      row.innerHTML = `
        <td>${entrada.tipo}</td>
        <td>${entrada.dispositivo}</td>
        <td>${entrada.mac}</td>
        <td>${entrada.switch}</td>
        <td>${entrada.puerto}</td>
        <td>${entrada.hora}</td>
        <td>${entrada.fecha.slice(0, 10)}</td>
      `;

      tableBody.appendChild(row);
    });
  }

  // Call fetchData when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    fetchDatabase();
    fetchTelnetDevices();
  });

  // Call fetchData every 5 seconds
  setInterval(fetchDatabase, 5000);
  setInterval(fetchTelnetDevices, 4000);

</script>
